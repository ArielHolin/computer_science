!<arch>
ws7_1.c/        0           0     0     644     3537      `
#include <stddef.h>  /* size_t */
#include <stdio.h>   /* puts */
#include <ctype.h>   /* tolower */
#include <assert.h>  /* assert */
#include <stdlib.h>  /* free */
#include <string.h>  /* memcmp */
#include "String.h"  

/* Receives const string and return string length */
size_t StrLen(const char *str)
{
	size_t len = 0;
	
	while (*str)
	{
		++str;
		++len;
	} 
	
	return len;
}

/* Receives two strings: if same return 0, else if s1>s2 return int > 0, else
   return int < 0 */
int StrCmp(const char *str1, const char *str2)
{
	while (*str1 && *str1==*str2)
	{
		++str1;
		++str2;
	}
	
	return *str1 - *str2;
}

/* Copies the string pointed to by src, including '\0' */
char *StrCpy(char *dest, const char *src)
{	
	char *dest_cpy = dest;
	
	assert(dest!=NULL && src!= NULL);
	
	while (*src)
	{
		*dest = *src;
		++dest;
		++src;
	}
	
	*dest = '\0';
	
	return dest_cpy;
}

/* Same as StrCpy, except that at most n bytes of src are copied. */
char *StrnCpy(char *dest, const char *src, size_t size)
{
	char *dest_cpy = dest;
	size_t i = 0;
	
	assert(dest!=NULL && src!=NULL);
	
	for (i = 0; i<size || *src=='\0'; ++i)
	{
		*dest = *src;
		++dest;
		++src;
	}
	
	for(; i < size; i++)
	{
		*dest = '\0';
	}
	
	*dest = '\0';
	
	return dest_cpy;
}

/* Performs byte-by-byte comparison between 2 strings, ignoring the case of the
   characters. return int>0 if s1>s2, int<0 if s1<s2, 0 if s1=s2.
   s1<s2 or s2<s1 determined by alphabetical order. */
int StrCaseCmp(const char *str1, const char *str2)
{
	assert(str1!=NULL && str2!=NULL);	
		
	while (*str1 && tolower(*str1)==tolower(*str2))
	{
		++str1;
		++str2;
	}
	
	return tolower(*str1) - tolower(*str2);
}

/* Returns a pointer to the first occurence of char c in s. */
char *StrChr(const char *str, int chr)
{
	char char_c = chr;
	
	assert(str != NULL);
	
	while (*str && *str!=char_c)
	{
		++str;
	}
	
	return (*str == char_c) ? (char *)str : NULL;
}

/* Returns a pointer to a new string which is a duplicate of s */
char *StrDup(const char *str)
{
	char *res = (char *)malloc(StrLen(str) + 1);
	
	assert (str != NULL);

	res = StrCpy(res, str);
	return res;
}

/* appends  the src string to the dest string, overwriting the terminating null byte
   ('\0') at the end of dest, and then adds a terminating null byte. */
char *StrCat(char *dest, const char *src)
{
	size_t dest_size = StrLen(dest);
	char *dest_end_ptr = dest + dest_size;
	
	while (*src)
	{
		*dest_end_ptr = *src;
		++dest_end_ptr;
		++src;
	}
	
	*dest_end_ptr = '\0';
	
	return dest;
}


/* Same as StrCat but will use at most n bytes from src, and doesn't need to
   be null terminated. */
char *StrnCat(char *dest, const char *src, size_t size)
{
	size_t dest_size = StrLen(dest);
	char *dest_end_ptr = dest + dest_size;
	size_t i = 0;
	
	for(i = 0; i<size || *src=='\0'; ++i)
	{
		*dest_end_ptr = *src;
		++dest_end_ptr;
		++src;
	}
	
	for(; i < size; ++i)
	{
		*dest_end_ptr = '\0';
	}
	
	return dest;
}

/* The strstr() function finds the first occurrence of the substring needle 
   in the string haystack. */
char *StrStr(const char *haystack, const char *needle)
{
	size_t needle_size = StrLen(needle);
	
	while (*haystack)
	{
		if (memcmp(haystack++, needle, needle_size) == 0)
		{
			return (char *)haystack - 1;
		}
	}
	
	return NULL;
}

/* calculates the length (in bytes) of the initial segment of s which 
   consists entirely of bytes in accept. */
size_t StrSpn(const char *str, const char *accept)
{
	size_t len = 0;
	
	while (*str && StrChr(accept, *str++))
	{
		++len;
	}
	
	return len;
}


ws7_2.c/        0           0     0     644     1927      `
#include <stddef.h>  /* size_t */
#include "String.h"  /* StrLen, StrCmp, StrCpy */
#include <assert.h>  /* assert */
#include <stdio.h>   /* puts */
#include <stdlib.h>  /* malloc, free */
#include <string.h>

void TestStrLen(void)
{
	assert(5 == StrLen("Hello"));
	assert(14 == StrLen("dkj^& 9g $#@ae"));
	assert(0 == StrLen(""));
	puts("TestStrLen() Success!");
}

void TestStrCmp(void)
{
	assert(0 == StrCmp("Hello", "Hello"));
	assert(0 < StrCmp("hi", "Hi"));
	assert(0 > StrCmp("dkjcD^24^*!@", "vlkkv(*@!21 "));
	puts("TestStrCmp() Success!");
}

void TestStrCpy(void)
{
	const char *src1 = "Hello";
	char *dst1 = (char *)malloc(StrLen(src1) + 1);
	
	assert(0 == StrCmp(StrCpy(dst1, src1), src1));
	
	free(dst1);
	
	puts("TestStrCpy() Success!");
}

void TestStrnCpy(void)
{
	const char *src1 = "Hello!!!!";
	char *dst1 = (char *)malloc(sizeof(char)*4 + 1);
	char *dst2 = (char *)malloc(sizeof(char)*12 + 1);
	
	assert(StrnCpy(dst1, src1, 4) == strncpy(dst1, src1, 4));
	assert(StrnCpy(dst2, src1, 12) == strncpy(dst2, src1, 12));
	
	puts("TestStrnCpy() Success!");
	
	free(dst1);
	free(dst2);
}

void TestStrCaseCmp(void)
{
	const char *s1_tst = "hElLO";
	const char *s2_tst = "HeLLo";
	
	const char *s1_tst1 = "aRIel";
	const char *s2_tst1 = "NIsaN";
	
	const char *s1_tst2 = "H&$I!";
	const char *s2_tst2 = "h&$i!";
	
	assert(0 == StrCaseCmp(s1_tst, s2_tst));
	assert(0 > StrCaseCmp(s1_tst1, s2_tst1));
	assert(0 == StrCaseCmp(s1_tst2, s2_tst2));
	
	puts("TestStrCaseCmp() Success!");
}

void TestStrChr(void)
{
	const char *s1_tst = "abcbad";
	int a = 97;
	int b = 98;
	int c = 99;
	int d = 100;

	char *res1 = StrChr(s1_tst, a);
	char *res2 = StrChr(s1_tst, b);
	char *res3 = StrChr(s1_tst, c);
	char *res4 = StrChr(s1_tst, d);
	
	assert(res1 == (char *)s1_tst);
	assert(res2 == (char *)(s1_tst + 1));
	assert(res3 == (char *)(s1_tst + 2));
	assert(res4 == (char *)(s1_tst + 5));
	
	puts("TestStrChr() Success!");
}

ws7_3.c/        0           0     0     644     1787      `
#include <stddef.h>  /* size_t */
#include "String.h"  /* StrLen, StrCmp, StrCpy */
#include <assert.h>  /* assert */
#include <stdio.h>   /* puts */
#include <stdlib.h>  /* malloc, free */
#include <string.h>

void TestStrDup(void)
{
	const char *s = "Hello";
	char *res = StrDup(s);
	
	printf("Input string: %s\n", s);
	printf("Output string: %s\n\n", res);
	
	assert(s!=res);
	
	puts("TestStrDup() Success!");
	
	free(res);
}

void TestStrCat(void)
{
	char *dest1 = "Hello, ";
	const char *src1 = "World!";
	char *res = (char *)malloc(StrLen(dest1) + 2*StrLen(src1) + 1);
	size_t i = 0;
	
	for (i = 0; i < StrLen(dest1) + 2*StrLen(src1) + 1; ++i)
	{
		res[i] = 0;
	}
	
	StrCpy(res, dest1);
	assert(StrCat(res, src1) == strcat(res, src1));
	
	puts("TestStrCat() Success!");
	
	free(res);
}


void TestStrnCat(void)
{
	char *dest1 = "Hello, ";
	const char *src1 = "World!";
	char *res = (char *)malloc(StrLen(dest1) + StrLen(src1) + 1);
	size_t i = 0;
	
	for (i = 0; i < StrLen(dest1) + StrLen(src1) + 1; ++i)
	{
		res[i] = 0;
	}
	
	StrCpy(res, dest1);
	assert(StrnCat(res, src1, 3) == strncat(res, src1, 3));
	
	puts("TestStrnCat() Success!");
	
	free(res);	
}

void TestStrStr(void)
{
	const char *hay = "Hello, World!";
	const char *need = "lo, W!";
	char *res = StrStr(hay, need);
	
	assert(res == strstr(hay, need));
	
	puts("TestStrStr() Success!");
}

void TestStrSpn(void)
{
	char *s1 = "Aticleworld";
    char *accept1 = "Atic";
    
    char *s2 = "ABCDEF";
    char *accept2 = "0A245BFC19ED";
    
    char *s3 = "ZBCDEF";
    char *accept3 = "0A245BFC19ED";

    
    assert(StrSpn(s1, accept1) == strspn(s1, accept1));
    assert(StrSpn(s2, accept2) == strspn(s2, accept2));
    assert(StrSpn(s3, accept3) == strspn(s3, accept3));
    
    puts("TestStrSpn() Success!");
}

ws7_4.c/        0           0     0     644     202       `
int main(void)
{
	TestStrLen();
	TestStrCmp(); 
	TestStrCpy();
	TestStrnCpy();
	TestStrCaseCmp();
	TestStrChr();
	TestStrDup();
	TestStrCat();
	TestStrnCat();
	TestStrStr();
	TestStrSpn();
	return 0;
}
ws7.h/          0           0     0     644     1641      `
#ifndef __STRING_H__
#define __STRING_H__

/* Receives string and return its length */
size_t StrLen(const char *s);

/* Receives 2 strings and return 0 if they are same, int>0 if s1>s2, int<0 if
   s1<s2 */
int StrCmp(const char *s1, const char *s2);

/* Copies the string pointed to by src, including '\0' */
char *StrCpy(char *dest, const char *src);

/* Same as StrCpy, except that at most n bytes of src are copied. */
char *StrnCpy(char *dest, const char *src, size_t n);

/* Performs byte-by-byte comparison between 2 strings, ignoring the case of the
   characters. return int>0 if s1>s2, int<0 if s1<s2, 0 if s1=s2.
   s1<s2 or s2<s1 determined by alphabetical order. */
int StrCaseCmp(const char *s1, const char *s2);

/* Returns a pointer to the first occurence of char c in s. */
char *StrChr(const char *s, int c);

/* Returns a pointer to a new string which is a duplicate of s */
char *StrDup(const char *s);

/* appends the src string to the dest string, overwriting the terminating null 
   byte ('\0') at the end of dest, and then adds a terminating null byte. */
char *StrCat(char *dest, const char *src);

/* Same as StrCat but will use at most n bytes from src, and doesn't need to
   be null terminated. */
char *StrnCat(char *dest, const char *src, size_t n);

/* The strstr() function finds the first occurrence of the substring needle 
   in the string haystack. */
char *StrStr(const char *haystack, const char *needle);

/* calculates the length (in bytes) of the initial segment of s which 
   consists entirely of bytes in accept. */
size_t StrSpn(const char *s, const char *accept);

#endif  /* __STRING_H__ */

